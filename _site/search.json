[
  
    {
      "title"    : "Automatizar despliegues en Azure con Terraform y GitHub Actions",
      "category" : "",
      "tags"     : "Terraform, Azure, GitHub, and OpenID",
      "url"      : "/automatizar-despliegues-en-azure-con-terraform-y-github-actions",
      "date"     : "Jun 28, 2023",
      "content"  : "La mejor forma de hacer despliegues con Terraform es automatizar todo el proceso que va desde terraform init a terraform apply, con un proceso previo de aprobación antes de aplicar los cambios y una conexión a Azure haciendo uso de identidades federadas para OpenID con el objetivo de no almacenar credenciales en GitHub.En este artículo os muestro como automatizar despliegues de infraestructura en Azure con módulos de Terraform usando un workflow de GitHub Actions, descargando los módulos a través de SSH y realizando la conexión con identidades federada para OpenID.Tabla de contenidos  Arquitectura y contenido  Configurar backend en Azure  Configurar identidades federadas para OpenID  Configurar clave pública y privada  Crear entornos en GitHub  Agregar secretos en GitHubArquitectura y contenidoLos recursos que vamos a crear en Azure para poner en marcha este escenario son un grupo de recursos lab-rg, una cuenta de almacenamiento labaztfbackend y un contenedor privado tbackend. En el contenedor tbackend es donde va a estar almacenado el archivo de estado terraform.tfstate con la infraestructura de Azure gestionada por Terraform. En Azure AD también hay que crear un registro de aplicación tf-sp-terraform, configurar dos identidades federadas plan y apply para OpenID Connect y dar permisos de colaborador al registro de aplicación tf-sp-terraform sobre la suscripción para que pueda crear, eliminar o administrar los recursos de Azure.Con un workflow de GitHub Actions vamos automatizar el despliegue de un grupo de recursos llamado rg-test00 con las etiquetas test5 y test6.El siguiente repositorio az-tf-deployment-oidc es la plantilla que vamos a usar para trabajar este escenario. Para usar la plantilla: Use this template &amp;gt; Create a new repository.En el raiz del repositorio se encuentran los ficheros main.tf y terraform.tfvars donde está el código de Terraform del proyecto que vamos a desplegar, en este caso un grupo de recursos con un módulo de Terraform.  Código archivo main.tf  Código archivo terraform.tfvarsLa ejecución del workflow se realiza desde el apartado Actions en GitHub.  Código del workflowConfigurar backend en AzureTenemos que crear en Azure un backend donde estará alojado el archivo de estado terraform.tfstate con la infraestructura de Azure gestionada por Terraform.Hay que crear una cuenta de almacenamiento y un contenedor privado. Para este escenario creo una cuenta de almacenamiento llamada labaztfbackend y un contenedor tbackend.Posteriormente tendremos que editar el siguiente bloque de nuestro código main.tf y agregar el nombre del grupo de recursos, cuenta de almacenamiento y contenedor que hemos creado:backend &quot;azurerm&quot; {    resource_group_name = &quot;lab-rg&quot;            # Nombre del grupo de recursos donde se encuentra la cuenta de almacenamiento    storage_account_name = &quot;labaztfbackend&quot;   # Nombre de la cuenta de almacenamiento donde se va almacenar el fichero de estado    container_name = &quot;tbackend&quot;               # Nombre del container donde se va almacenar el fichero de estado    key = &quot;terraform.tfstate&quot;                 # Nombre del fichero de estado. El nombre estándar es terraform.tfstate  }Referencia: https://github.com/ragalgut/az-tf-deployment-oidc/blob/main/main.tf#L27-L32Configurar identidades federadas para OpenIDPara la creación de una identidad federada para OpenID hay que crear un registro de aplicación en Azure AD. Para este escenario creo uno llamado tf-sp-terraform con acceso ‘Solo cuentas de este directorio organizativo (solo de Default Directory: inquilino único)’.Posteriormente creamos dos identidades federadas del tipo entorno, yo las he llamado plan y apply. En el workflow hay dos jobs configurados, uno encargado de realizar Terraform Plan y otro encargado de realizar Terraform Apply, cada uno de estos jobs tienen configurado un entorno en GitHub, también llamados plan y apply, este último configurado con un proceso previo de aprovación para que podamos verificar el plan y poder aprobar o rechazar los cambios. La identidad federada que crearemos en Azure será de tipo entorno para que los jobs validen correctamente con Azure.Para crear una identidad federada accedemos al registro de aplicación creado anteriormente &amp;gt; Certificados y secretos &amp;gt; Credenciales federadas &amp;gt; Agregar credencial.El escenario que tenemos que seleccionar es Acciones de GitHub que implementan recursos de Azure, la Organización es nuestro usuario de github.com, en el caso de GitHub Enterprise es el nombre de la organización, en Repositorio el nombre de nuestro repositorio, Tipo de entidad seleccionamos Entorno y por último indicamos el nombre de la identidad.El Identificador de sujeto y Api token que se muestra en la configuración es la que usa github.com. Para GitHub Enterprise hay que consultar con el administrador cual es el identificador y el api token y configurarlo en la identidad federada en Azure.  Cuando se ejecuta el workflow y da un fallo en la etapa de conexión con OpenID se puede ver en los logs cual es el identificador y api token que espera encontrar.Por último tenemos que dar permisos de colaborador al registro de aplicación creado, en mi caso tf-sp-terraform sobre la suscripción que queremos administrar con Terraform.Crear entornos en GitHubPara crear los dos entornos en GitHub vamos en nuestro repositorio a Settings &amp;gt; Environments.Creamos un nuevo entorno desde New environment y le damos un nombre, para este escenario lo he llamado plan.  Hay que tener en cuenta que el nombre del entorno de GitHub debe coincidir con el nombre del entorno configurado en la identidad federada para que pueda hacer conexión, además en este escenario se espera que los nombres sean plan y apply porque están configurados en cada job en el código del workflow. Referencia: plan, apply.El entorno apply debe tener marcada la opción Required reviewers y agregar un reviewer para el proceso de aprobación del job Terraform Apply, podemos ser nosotros mismos.Configurar clave pública y privadaPara que terraform init pueda clonar el repositorio del módulo por SSH tenemos que generar un par de claves, la privada estará encriptada como variable en un secreto de GitHub y la pública estará unida en nuestro perfil de usuario. Este proceso lo detallo más adelante.ssh-keygen -t rsaAgregar secretos en GitHubEn el workflow hay configurado una serie de variables que GitHub espera obtener la información del repositorio de secretos, por lo tanto, tenemos que crearlos.Referencia: varibales en el workflowPara crear los secretos, tenemos que ir desde nuestro repositorio a Settings &amp;gt; Secrets and variables &amp;gt; Actions &amp;gt; New repository secret.A continuación en la siguiente tabla proporciono la información que debeís agregar en cada campo:            Name      Secret                  AZURE_CLIENT_ID      El ID del registro de aplicación creado (cliente)              AZURE_SUBSCRIPTION_ID      ID de la suscripción a gestionar con Terraform              AZURE_TENANT_ID      ID del tenant de Azure. Este ID también se puede obtener de la información del registro de aplicación              GIT_SSH_COMMAND      ssh -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa              SSH_KEY_GITHUB_ACTIONS      Clave privada del par de claves generados anteriormente        Al copiar la clave privada debemos tener en cuenta que debe incluir las líneas completas BEGIN OPENSSH PRIVATE KEY y END OPENSSH PRIVATE KEY. Además debe haber una línea en blanco al final del todo.Por último hay que configurar la clave pública en nuestra cuenta de usuario en Settings &amp;gt; SSH and GPG keys &amp;gt; New SSH key.  La clave pública debe tener el formato indicado y una línea en blanco al final.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2023-06-28T10:00:00+02:00'>28 Jun 2023</time><a class='article__image' href='/automatizar-despliegues-en-azure-con-terraform-y-github-actions'> <img src='/images/github-actions-workflow-terraform.svg' alt='Automatizar despliegues en Azure con Terraform y GitHub Actions'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/automatizar-despliegues-en-azure-con-terraform-y-github-actions'>Automatizar despliegues en Azure con Terraform y GitHub Actions</a> </h2><p class='article__excerpt'>En este post voy a mostrar como automatizar el despliegue de infraestructura en Azure con Terraform y un workflow de GitHub Actions.</p></div></div></div>"
    } ,
  
    {
      "title"    : "Creando un sitio web estático con Jekyll y GitHub",
      "category" : "",
      "tags"     : "Jekyll and GitHub",
      "url"      : "/creando-un-sitio-web-estatico-con-jekyll-y-github-pages",
      "date"     : "Jun 5, 2023",
      "content"  : "En este artículo voy a mostrar paso a paso como crear un sitio web estático con Jekyll desde un equipo con Windows 11 y como alojarlo en un repositorio de GitHub. No me voy a extender mucho en el uso de Jekyll, para ello he adjuntado unos enlaces de interés a la documentación oficial, me centraré en la creación del sitio y el correspondiente despliegue en GitHub.Tabla de contenidos  Arquitectura, como trabajar con Jekyll y GitHub  Prerequisitos  Instalar Jekyll  Enlaces de interés Jekyll  Publicar sitio en GitHub  Desplegar sitio en GitHub Pages  Configurar un dominio personalizadoArquitectura, como trabajar con Jekyll y GitHubJekyll permite ejecutar nuestro sitio estático en un servidor local http://localhost:4000. Esto nos permite revisar los cambios que aplicamos en el repositorio local en nuestro equipo antes de aplicar un commit o un push al repositorio público.Por lo tanto el repositorio local lo trato como entorno de desarrollo y el público como producción.Una vez realizado un push al repositorio público se ejecuta automáticamente un workflow de GitHub Actions que despliega el sitio de Jekyll en GitHub Pages.PrerequisitosEs necesario descargar e instala la última versión de Ruby+Devkit desde el siguiente enlace. Este conjunto de herramientas instala el lenguaje Ruby y un entorno de ejecución.Durante la instalación nos aseguramos tener marcadas las siguientes dos opciones:  Add Ruby executables to your PATH.  Associate .rb and .rbw files with this Ruby installation.Y también los siguientes componentes para la instalación:  Ruby-3.2.2 base files.  Ruby RI and HTML documentation.  MSYS2 development toolchain 2023-04-01.Tras finalizar la instalación dejamos marcado “Run ridk install” para que arranque la instalación de MSYS2 y las herramientas de desarrollo.Por último tenemos que instalar el componente 3 - MSYS2 and MINGW development toochain.Instalar JekyllLos comandos que facilito a continuación se ejecutan desde una consola CMD.Lo primero que tenemos que hacer es instalar Jekyll:gem install jekyll bundlerEl siguiente comando sirve para comprobar la versión de Jekyll instalada:jekyll -v commandPara crear un nuevo blog o sitio estático ejecutamos el siguiente comando:jekyll new myblogPara arrancar el servidor local de Jekyll y visualizar el blog accedemos a la carpeta myblog y ejecutamos:cd myblogbundle exec jekyll serveAbrimos en el navegador la siguiente URL http://localhost:4000 y podremos visualizar el blog.Enlaces de interés JekyllPara que podáis ampliar conocimientos sobre el uso de Jekyll os facilito una serie de recursos de la documentación oficial que os ayudará a entender la estructura de directorios, creación de contenido, plugins y temas, entre otros.Contenido  Pages  Post  Front Matter  Collections  Data Files  Assets  Static Files  PluginsEstructura del sitio  Structure  Liquid  Variables  Includes  Layouts  Permalinks  Themes  PaginationPublicar sitio en GitHubPara publicar nuestro sitio estático en GitHub seguimos los siguientes pasos:      Crear un repositorio en GitHub.            Clonamos nuestro repositorio en un directorio local de nuestro equipo. Yo hago uso de Visual Studio Code, pero también existen otras herramientas que facilitan la gestión de repositorios de GitHub como GitHub Desktop.        Copiamos el contenido de nuestro sitio al repositorio clonado.        Hacemos commit de todos los cambios y posteriormente un push para que se suba el contenido al repositorio público.      Desplegar sitio en GitHub PagesUna vez tenemos nuestro sitio público en GitHub tenemos que configurar GitHub Pages para que muestre el sitio web en un dominio de GitHub. Para ello vamos a Settings &amp;gt; Pages desde el repositorio público.En source seleccionamos GitHub Actions.Seleccionamos configurar Jekyll.Por último hacemos commit para aplicar el workflow que GitHub Actions nos facilita para el despliegue del sitio de Jekyll en GitHub Pages.Configurar un dominio personalizadoEl dominio que viene por defecto para GitHub Pages tiene el siguiente formato [usuarioGitHub].github.io.   Si queremos agregar nuestro propio dominio, en mi caso ragalgut.me, tenemos que agregar los siguientes registros en la configuración DNS de nuestro proveedor de dominio.Crear los siguientes registros A:   185.199.108.153   185.199.109.153   185.199.110.153   185.199.111.153Crear los siguientes registros AAA:   72606:50c0:8000::153   2606:50c0:8001::153   2606:50c0:8002::153   2606:50c0:8003::153Crear un registro CNAME en la que el subdominio sea www y el destino [usuarioGitHub].github.io.Configuramos el dominio personalizado en Settings &amp;gt; Pages.Tras validar el dominio personalizado el sitio web estará live.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2023-06-05T14:01:35+02:00'>05 Jun 2023</time><a class='article__image' href='/creando-un-sitio-web-estatico-con-jekyll-y-github-pages'> <img src='/images/jekyll-github.svg' alt='Creando un sitio web estático con Jekyll y GitHub'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/creando-un-sitio-web-estatico-con-jekyll-y-github-pages'>Creando un sitio web estático con Jekyll y GitHub</a> </h2><p class='article__excerpt'>Te detallo como puedes crear un sitio web estático con Jekyll y alojarlo de forma gratuita en GitHub.</p></div></div></div>"
    } ,
  
    {
      "title"    : "Configurar la autenticación SMTP en cuentas de Microsoft 365",
      "category" : "",
      "tags"     : "Microsoft 365 and Exchange Online",
      "url"      : "/configurar-la-autenticacion-smtp-en-cuentas-de-microsoft-365",
      "date"     : "May 24, 2023",
      "content"  : "SMTP es un protocolo usado para el envío y recepción de correos presente en aplicaciones, servidores de correos, impresoras multifuncionales, formularios webs, clientes POP3 e IMAP4, etc. El puerto que utiliza es TCP 587.Las cuentas de Microsoft 365 que disponen de una licencia para Exchange Online permiten habilitar la autenticación SMTP (AUTH SMTP), pero, solo se recomienda hacerlo en cuentas que lo requieran porque por defecto hacen uso de una autenticación más moderna y segura.  Si tiene habilitado los valores predeterminados de seguridad en el tenant de su empresa, AUTH SMTP está por defecto deshabilitado en todas las cuentas de Microsoft 365.Requisitos para activar o desactivar SMTP y conexión a Exchange Online mediante PowerShell      Tener habilitada la ejecución de scripts.    Set-ExecutionPolicy RemoteSigned            Tener instalado el módulo de PowerShell Exchange Online.    Install-Module -Name ExchangeOnlineManagement -RequiredVersion 3.1.0            Cargamos el módulo ejecutando el siguiente comando.    Import-Module ExchangeOnlineManagement            Para establecer una conexión como administrador con Exchange Online ejecutamos el siguiente comando, donde admin@contoso.com es la cuenta de administrador.    Connect-ExchangeOnline -UserPrincipalName admin@contoso.com      Deshabilitar autenticación SMTP globalmentePara deshabilitar SMTP globalmente en la empresa, ejecutamos el siguiente comando.Set-TransportConfig -SmtpClientAuthenticationDisabled $truePara comprobar que se ha deshabilitado la autenticación SMTP ejecutamos el siguiente comando y comprobamos que el valor de la propiedad SmtpClientAuthenticationDisablede sea True.Get-TransportConfig | Format-List SmtpClientAuthenticationDisabledHabilitar autenticación SMTP en cuentas específicasPara comprobar la configuración actual de la cuenta de usuario ejecutamos el siguientes comando, donde usuario@contoso.com introducimos la cuenta de usuario a revisar.Get-CASMailbox -Identity Usuario@contoso.com | Format-List SmtpClientAuthenticationDisabledSi nos carga el usuario con el valor en blanco o $True ejecutamos el siguiente comando para habilitar la autenticación SMTP.Set-CASMailbox -Identity sean@contoso.com -SmtpClientAuthenticationDisabled $false Referencia: Microsoft Learn",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2023-05-24T14:01:35+02:00'>24 May 2023</time><a class='article__image' href='/configurar-la-autenticacion-smtp-en-cuentas-de-microsoft-365'> <img src='/images/activar-desactivar-smtp.webp' alt='Configurar la autenticación SMTP en cuentas de Microsoft 365'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/configurar-la-autenticacion-smtp-en-cuentas-de-microsoft-365'>Configurar la autenticación SMTP en cuentas de Microsoft 365</a> </h2><p class='article__excerpt'>Se recomienda habilitar la autenticación SMTP solo para las cuentas o buzones que lo requieran ya que es la opción menos segura.</p></div></div></div>"
    } 
  
]
